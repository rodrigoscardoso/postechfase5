services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: fiapx-postgres
    environment:
      POSTGRES_DB: fiapx_videos
      POSTGRES_USER: fiapx_user
      POSTGRES_PASSWORD: fiapx_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - fiapx-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fiapx_user -d fiapx_videos"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: fiapx-redis
    ports:
      - "6379:6379"
    networks:
      - fiapx-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: fiapx-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: fiapx_user
      RABBITMQ_DEFAULT_PASS: fiapx_password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - fiapx-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Authentication Service
  auth-service:
    build: ./auth-service
    container_name: fiapx-auth-service
    environment:
      DATABASE_URL: postgresql://fiapx_user:fiapx_password@postgres:5432/fiapx_videos
      REDIS_URL: redis://redis:6379
      JWT_SECRET: fiapx_jwt_secret_key_2024
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fiapx-network
    restart: unless-stopped

  # Video Processor Service
  video-processor:
    build: ./video-processor
    environment:
      DATABASE_URL: postgresql://fiapx_user:fiapx_password@postgres:5432/fiapx_videos
      RABBITMQ_URL: amqp://fiapx_user:fiapx_password@rabbitmq:5672/
      REDIS_URL: redis://redis:6379
    volumes:
      - video_storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fiapx-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build: ./notification-service
    container_name: fiapx-notification-service
    environment:
      RABBITMQ_URL: amqp://fiapx_user:fiapx_password@rabbitmq:5672/
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - fiapx-network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: fiapx-api-gateway
    environment:
      AUTH_SERVICE_URL: http://auth-service:8000
      VIDEO_PROCESSOR_URL: http://video-processor:8000
      REDIS_URL: redis://redis:6379
    ports:
      - "8081:8000"
    depends_on:
      - auth-service
      - video-processor
      - redis
    networks:
      - fiapx-network
    restart: unless-stopped

  # Frontend
  frontend:
    build: ./frontend
    container_name: fiapx-frontend
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    networks:
      - fiapx-network
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: fiapx-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - fiapx-network

  grafana:
    image: grafana/grafana:latest
    container_name: fiapx-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - fiapx-network

volumes:
  postgres_data:
  rabbitmq_data:
  video_storage:
  prometheus_data:
  grafana_data:

networks:
  fiapx-network:
    driver: bridge

